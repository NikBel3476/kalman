name: Build and test

on: [push, pull_request]

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    env:
      OUT_FILENAME: autopilot_selfcheck-${{ github.ref_name }}-${{ matrix.os }}-${{ matrix.c_compiler }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc-13, clang, clang-15, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: windows-latest
            c_compiler: clang
            cpp_compiler: clang
          - os: ubuntu-latest
            c_compiler: gcc-13
            cpp_compiler: g++-13
          - os: ubuntu-latest
            c_compiler: clang-15
            cpp_compiler: clang++-15
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc-13
          - os: windows-latest
            c_compiler: clang-15
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: clang
          - os: macos-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: gcc-13
          - os: macos-latest
            c_compiler: clang-15

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: true

    - name: Install gcc-13 (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: >
        sudo add-apt-repository ppa:ubuntu-toolchain-r/test -y &&
        sudo apt-get update -y &&
        sudo apt-get install gcc-13 g++-13

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: "6.8.0"
        modules: "qtserialport"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCPACK_PACKAGE_FILE_NAME=${{ env.OUT_FILENAME }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel

    - name: Create archive (windows)
      if: matrix.os == 'windows-latest'
      run: cpack --config "${{ steps.strings.outputs.build-output-dir }}/CPackConfig.cmake" -G ZIP

    - name: Create archive (ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: cpack --config "${{ steps.strings.outputs.build-output-dir }}/CPackConfig.cmake" -G TXZ

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}

    - name: Release
      if: ${{ startsWith(github.ref, 'refs/tags/') }}
      uses: softprops/action-gh-release@v2
      with:
        body: ${{ github.ref_name }}
        files: |
          ${{ env.OUT_FILENAME }}.tar.xz
          ${{ env.OUT_FILENAME }}.zip

    #- name: Release (windows)
    #  if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'windows-latest' }}
    #  uses: softprops/action-gh-release@v2
    #  with:
    #    body: ${{ matrix.os }}-${{ github.ref_name }}-${{ matrix.c_compiler }}
    #    files: autopilot_selfcheck-${{ github.ref_name }}-${{ runner.os }}-${{ matrix.c_compiler }}.exe

    #- name: Release (macos)
    #  if: ${{ startsWith(github.ref, 'refs/tags/') && matrix.os == 'macos-latest' }}
    #  uses: softprops/action-gh-release@v2
    #  with:
    #    body: ${{ matrix.os }}-${{ github.ref_name }}-${{ matrix.c_compiler }}
    #    files: autopilot_selfcheck-${{ github.ref_name }}-${{ runner.os }}-${{ matrix.c_compiler }}.tar.gz
